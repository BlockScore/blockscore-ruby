diff --git a/spec/unit/block_score/actions/all_spec.rb b/spec/unit/block_score/actions/all_spec.rb
index db097aa..075fff6 100644
--- a/spec/unit/block_score/actions/all_spec.rb
+++ b/spec/unit/block_score/actions/all_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Actions::All do
+RSpec.describe BlockScore::Actions::All, vcr: true do
   describe '.all' do
     let(:uniq_token_one) { '4a2c019a1e3c33442644d9f52c7a93f7' }
     let(:uniq_token_two) { 'ba9a680671c6c006c6105aa450837668' }
diff --git a/spec/unit/block_score/actions/create_spec.rb b/spec/unit/block_score/actions/create_spec.rb
index a067a5f..ed89e77 100644
--- a/spec/unit/block_score/actions/create_spec.rb
+++ b/spec/unit/block_score/actions/create_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Actions::Create do
+RSpec.describe BlockScore::Actions::Create, vcr: true do
   describe '.create' do
     subject(:candidate) do
       BlockScore::Candidate.create(attributes_for(:candidate))
diff --git a/spec/unit/block_score/actions/delete_spec.rb b/spec/unit/block_score/actions/delete_spec.rb
index 57cc7f4..72b53f7 100644
--- a/spec/unit/block_score/actions/delete_spec.rb
+++ b/spec/unit/block_score/actions/delete_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Actions::Delete do
+RSpec.describe BlockScore::Actions::Delete, vcr: true do
   describe '#delete' do
     subject(:candidate) { create(:candidate) }
     before { candidate.delete }
diff --git a/spec/unit/block_score/actions/retrieve_spec.rb b/spec/unit/block_score/actions/retrieve_spec.rb
index 36d4a40..015c9d9 100644
--- a/spec/unit/block_score/actions/retrieve_spec.rb
+++ b/spec/unit/block_score/actions/retrieve_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Actions::Retrieve do
+RSpec.describe BlockScore::Actions::Retrieve, vcr: true do
   describe '.retrieve' do
     let(:person_id) { create(:person).id }
     subject(:person) { BlockScore::Person.retrieve(person_id) }
diff --git a/spec/unit/block_score/actions/update_spec.rb b/spec/unit/block_score/actions/update_spec.rb
index 4b833fe..672c82a 100644
--- a/spec/unit/block_score/actions/update_spec.rb
+++ b/spec/unit/block_score/actions/update_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Actions::Update do
+RSpec.describe BlockScore::Actions::Update, vcr: true do
   describe '#save!' do
     context 'when updating an existing candidate' do
       subject(:candidate) { create(:candidate, name_first: 'John') }
diff --git a/spec/unit/block_score/actions/write_once_spec.rb b/spec/unit/block_score/actions/write_once_spec.rb
index dfe8d23..25d4589 100644
--- a/spec/unit/block_score/actions/write_once_spec.rb
+++ b/spec/unit/block_score/actions/write_once_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Actions::WriteOnce do
+RSpec.describe BlockScore::Actions::WriteOnce, vcr: true do
   describe '#save!' do
     context 'when creating a new person' do
       subject(:person) { build(:person) }
diff --git a/spec/unit/block_score/api_connection_error_spec.rb b/spec/unit/block_score/api_connection_error_spec.rb
index 4c2637e..8cee811 100644
--- a/spec/unit/block_score/api_connection_error_spec.rb
+++ b/spec/unit/block_score/api_connection_error_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::APIConnectionError do
+RSpec.describe BlockScore::APIConnectionError, vcr: true do
   let(:stubbed_route_pattern) { %r{.*api\.blockscore\.com/people/abc123} }
   let(:stubbed_error) { Errno::ECONNREFUSED }
   let(:message) { 'Connection refused - Exception from WebMock' }
diff --git a/spec/unit/block_score/base_spec.rb b/spec/unit/block_score/base_spec.rb
index 9caccea..f3bdcab 100644
--- a/spec/unit/block_score/base_spec.rb
+++ b/spec/unit/block_score/base_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Base do
+RSpec.describe BlockScore::Base, vcr: true do
   describe '#save' do
     context 'when creating a new candidate' do
       subject(:candidate) { build(:candidate) }
diff --git a/spec/unit/block_score/candidate_spec.rb b/spec/unit/block_score/candidate_spec.rb
index 918fa88..9c8601b 100644
--- a/spec/unit/block_score/candidate_spec.rb
+++ b/spec/unit/block_score/candidate_spec.rb
@@ -1,6 +1,6 @@
 require 'faker'

-RSpec.describe BlockScore::Candidate do
+RSpec.describe BlockScore::Candidate, vcr: true do
   describe '.new' do
     subject(:candidate) { described_class.new(attributes_for(:candidate)) }

diff --git a/spec/unit/block_score/collection/member_spec.rb b/spec/unit/block_score/collection/member_spec.rb
index 2eb3bd5..18dc24b 100644
--- a/spec/unit/block_score/collection/member_spec.rb
+++ b/spec/unit/block_score/collection/member_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::Collection::Member do
+RSpec.describe BlockScore::Collection::Member, vcr: true do
   describe '#save' do
     let(:question_set) { BlockScore::QuestionSet.new }
     subject(:member) { described_class.new(person, question_set) }
diff --git a/spec/unit/block_score/collection_spec.rb b/spec/unit/block_score/collection_spec.rb
index ace8b73..cf60f63 100644
--- a/spec/unit/block_score/collection_spec.rb
+++ b/spec/unit/block_score/collection_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::Collection do
+RSpec.describe BlockScore::Collection, vcr: true do
   let(:person) { create(:person) }
   subject(:question_sets) { person.question_sets }

diff --git a/spec/unit/block_score/company_spec.rb b/spec/unit/block_score/company_spec.rb
index 16ca053..a01deb8 100644
--- a/spec/unit/block_score/company_spec.rb
+++ b/spec/unit/block_score/company_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::Company do
+RSpec.describe BlockScore::Company, vcr: true do
   describe '.new' do
     subject(:company) { described_class.new(attributes_for(:company)) }

diff --git a/spec/unit/block_score/invalid_request_error_spec.rb b/spec/unit/block_score/invalid_request_error_spec.rb
index 33c42d6..0d89391 100644
--- a/spec/unit/block_score/invalid_request_error_spec.rb
+++ b/spec/unit/block_score/invalid_request_error_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::InvalidRequestError do
+RSpec.describe BlockScore::InvalidRequestError, vcr: true do
   subject { BlockScore::Person.create(first_name: 'John') }
   let(:message) do
     '(Type: invalid_request_error) ' \
diff --git a/spec/unit/block_score/not_found_error_spec.rb b/spec/unit/block_score/not_found_error_spec.rb
index 37266b3..85c45da 100644
--- a/spec/unit/block_score/not_found_error_spec.rb
+++ b/spec/unit/block_score/not_found_error_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::NotFoundError do
+RSpec.describe BlockScore::NotFoundError, vcr: true do
   subject { BlockScore::Person.retrieve('abc123') }
   let(:message) do
     '(Type: invalid_request_error) ' \
diff --git a/spec/unit/block_score/person_spec.rb b/spec/unit/block_score/person_spec.rb
index 38caef1..971a4d3 100644
--- a/spec/unit/block_score/person_spec.rb
+++ b/spec/unit/block_score/person_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::Person do
+RSpec.describe BlockScore::Person, vcr: true do
   describe '.new' do
     subject(:person) { described_class.new(attributes_for(:person)) }

diff --git a/spec/unit/block_score/question_set_spec.rb b/spec/unit/block_score/question_set_spec.rb
index 6d7173c..c68cf02 100644
--- a/spec/unit/block_score/question_set_spec.rb
+++ b/spec/unit/block_score/question_set_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::QuestionSet do
+RSpec.describe BlockScore::QuestionSet, vcr: true do
   describe '.new' do
     subject(:question_set) { described_class.new }

diff --git a/spec/unit/block_score/util_spec.rb b/spec/unit/block_score/util_spec.rb
index 7f861b9..40460f6 100644
--- a/spec/unit/block_score/util_spec.rb
+++ b/spec/unit/block_score/util_spec.rb
@@ -1,4 +1,4 @@
-RSpec.describe BlockScore::Util do
+RSpec.describe BlockScore::Util, vcr: true do
   shared_context 'a transform' do
     subject(:actual) { described_class.send(method, input) }
     it { should eql(output) }
diff --git a/spec/vcr_setup.rb b/spec/vcr_setup.rb
index 7a5f95c..f1331a7 100644
--- a/spec/vcr_setup.rb
+++ b/spec/vcr_setup.rb
@@ -13,10 +13,9 @@ module BlockScore
       BlockScore.api_key = ENV.fetch(ENVIRONMENT_API_KEY, PLACEHOLDER_API_KEY)
     end

-    config.around(:each) do |example|
+    config.around(vcr: true) do |example|
       record_option = ENV.fetch(RECORD_MODE_KEY, :none).to_sym
-      options = example.metadata.fetch(:vcr, record: record_option)
-      BlockScore.run_vcr_example(options, example)
+      BlockScore.run_vcr_example({ record: record_option }, example)
     end
   end
